server:
  port: 8030

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      default-filters: # Global Filter 사용
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway GlobalFilter
            preLogger: true
            postLogger: true
      routes:
        - id: user-service # eureka server에 등록된 spring.application.name
          uri: lb://USER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/user/**  # 해당 패턴에 대해서
          filters:
            - RewritePath=/user/?(?<segment>.*), /$\{segment} # URL을 변경
            - CustomAuthFilter # 해당 필터 클래스로 필터 실행
        - id: statdata-service
          uri: lb://STATDATA-SERVICE
          predicates:
            - Path=/statdata/**
          filters:
            - AddRequestHeader=sc_req,statdata # 기본 필터로 필터 실행
            - AddResponseHeader=sc_res,statdata
            - RewritePath=/statdata/?(?<segment>.*), /$\{segment}
            - CustomAuthFilter
        - id: mapdata-service
          uri: lb://MAPDATA-SERVICE
          predicates:
            - Path=/mapdata/**
          filters:
            - AddRequestHeader=sc_req,mapdata
            - AddResponseHeader=sc_res,mapdata
            - RewritePath=/mapdata/?(?<segment>.*), /$\{segment}
            - name: CustomAuthFilter
            - name: LoggingFilter # 커스텀 필터에 args를 사용 시 name 필요
              args:
                baseMessage: Spring Cloud Gateway LoggingFilter
                preLogger: true
                postLogger: true
        - id: ec-user-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-USER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/user-service/login  # 해당 패턴에 대해서
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/?(?<segment>.*), /$\{segment} # URL을 변경
        - id: ec-user-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-USER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/user-service/users  # 해당 패턴에 대해서
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/?(?<segment>.*), /$\{segment} # URL을 변경
        - id: ec-user-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-USER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/user-service/actuator/**  # 해당 패턴에 대해서
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/?(?<segment>.*), /$\{segment} # URL을 변경
        - id: ec-user-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-USER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/user-service/**  # 해당 패턴에 대해서
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/?(?<segment>.*), /$\{segment} # URL을 변경
            - CustomAuthFilter
        - id: ec-catalog-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-CATALOG-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/catalog-service/**  # 해당 패턴에 대해서
          filters:
            - RewritePath=/catalog-service/?(?<segment>.*), /$\{segment} # URL을 변경
            - CustomAuthFilter
        - id: ec-order-service # eureka server에 등록된 spring.application.name
          uri: lb://EC-ORDER-SERVICE # 포워딩할 uri : user-service를 load balancing (eureak 서버 내 이름 기반)
          predicates:
            - Path=/order-service/**  # 해당 패턴에 대해서
          filters:
            - RewritePath=/order-service/?(?<segment>.*), /$\{segment} # URL을 변경
            - CustomAuthFilter

eureka:
  client:
    fetch-registry: true # 유레카 서비스에 자신을 주기적으로 등록
    register-with-eureka: true # 유레카 서비스가 시작할 때 레지스트리 정보를 로컬에 저장
    serviceUrl:
      defaultZone: ${EUREKA_URL:http://127.0.0.1:8787/eureka} # Eureka 서버 주소

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace